import os
import glob
import pandas as pd
import numpy as np
import librosa

# Danh s√°ch nh√£n t·ªëc ƒë·ªô n√≥i
levels = ["very slowly", "slowly", "slightly slowly", "moderate speed", "slightly fast", "fast", "very fast"]

# Thay v√¨ d√πng test_folder, ta ch·ªâ c·∫ßn:
# 1. processed_folder: Ch·ª©a c√°c t·ªáp .parquet c·∫ßn t√≠nh speaking_rate
# 2. wav_folder: Ch·ª©a c√°c file .wav t∆∞∆°ng ·ª©ng

processed_folder = "processed2_parquet"  # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c processed
wav_folder = "audio_outputs"                 # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a file .wav


def get_audio_duration(file_name, wav_folder):
    """
    T√≠nh th·ªùi l∆∞·ª£ng c·ªßa file audio d·ª±a tr√™n t√™n file v√† th∆∞ m·ª•c ch·ª©a .wav
    """
    path = os.path.join(wav_folder, file_name)
    path = fix_filename(path)
    if os.path.exists(path):
        try:
            duration = librosa.get_duration(filename=path)
            return duration
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc file √¢m thanh '{path}': {e}")
    else:
        print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {path}")
    return 0

def fix_filename(file_name: str) -> str:
    """
    N·∫øu file_name c√≥ d·∫°ng 'audio_outputs/audio_outputs/...'
    th√¨ thay th·∫ø b·∫±ng 'audio_outputs/...'
    """
    # B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh logic thay th·∫ø c·ª• th·ªÉ h∆°n n·∫øu c·∫ßn.
    return file_name.replace("audio_outputs/audio_outputs/", "audio_outputs/")

def compute_speaking_rate(text, file_name, wav_folder):
    """
    T√≠nh speaking rate = s·ªë t·ª´ trong text / duration c·ªßa audio.
    N·∫øu duration <= 0, tr·∫£ v·ªÅ 0.
    """
    num_words = len(text.split())
    duration = get_audio_duration(file_name, wav_folder)
    return num_words / duration if duration > 0 else 0


def main():
    # T√¨m t·∫•t c·∫£ file .parquet trong processed_folder
    processed_files = glob.glob(os.path.join(processed_folder, "*.parquet"))
    print(f"T√¨m th·∫•y {len(processed_files)} file parquet trong th∆∞ m·ª•c: {processed_folder}")

    for p_file in processed_files:
        file_name = os.path.basename(p_file)
        print(f"\nüîÑ X·ª≠ l√Ω file: {file_name}")

        # ƒê·ªçc file processed
        try:
            df_processed = pd.read_parquet(p_file)
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ ƒë·ªçc file processed {p_file}: {e}")
            continue

        # ƒê·∫£m b·∫£o c·ªôt 'text' kh√¥ng b·ªã thi·∫øu
        if "text" not in df_processed.columns:
            print(f"‚ùå File {p_file} kh√¥ng c√≥ c·ªôt 'text', b·ªè qua.")
            continue

        df_processed["text"] = df_processed["text"].fillna("")

        # ƒê·∫£m b·∫£o c·ªôt 'file_name' t·ªìn t·∫°i, v√¨ ta c·∫ßn t√™n file ƒë·ªÉ gh√©p v·ªõi wav_folder
        if "file_name" not in df_processed.columns:
            print(f"‚ùå File {p_file} kh√¥ng c√≥ c·ªôt 'file_name', b·ªè qua.")
            continue

        # T√≠nh computed_rate cho m·ªói d√≤ng
        df_processed["computed_rate"] = df_processed.apply(
            lambda row: compute_speaking_rate(row["text"], row["file_name"], wav_folder),
            axis=1
        )

        # Ph√¢n lo·∫°i computed_rate th√†nh 7 nh√≥m
        try:
            df_processed["speaking_rate"] = pd.qcut(df_processed["computed_rate"], q=len(levels), labels=levels)
        except Exception:
            # N·∫øu pd.qcut g·∫∑p l·ªói (v√≠ d·ª•: t·∫•t c·∫£ gi√° tr·ªã computed_rate gi·ªëng nhau)
            min_val = df_processed["computed_rate"].min()
            max_val = df_processed["computed_rate"].max()

            if min_val == max_val:
                # T·∫•t c·∫£ gi√° tr·ªã b·∫±ng nhau => g√°n lu√¥n c√πng m·ªôt nh√£n
                df_processed["speaking_rate"] = levels[0]
            else:
                bins = np.linspace(min_val, max_val, len(levels) + 1)
                df_processed["speaking_rate"] = pd.cut(
                    df_processed["computed_rate"], bins=bins, labels=levels, include_lowest=True
                )

        # L∆∞u file processed ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        try:
            df_processed.to_parquet(p_file, index=False)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t file: {p_file}")
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file {p_file}: {e}")

if __name__ == "__main__":
    main()
